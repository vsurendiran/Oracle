1. Log into prd session to check what is currently running
2. checking lock, long running queries, procedures
3. health check:
Health Check: A comprehensive assessment of the database system to ensure its optimal performance and integrity.
Tools and Methods: AWR, ADDM, Data Dictionary Views, Enterprise Manager, Health Monitor, Data Recovery Advisor, and custom SQL queries.
Best Practices: Regularly run health checks, monitor key performance indicators, use automation tools for continuous assessment, 
and address identified issues promptly to maintain database health and performance.

4. blocking session

In production to check the currently running session
====================================================
SELECT 
    s.sid,
    s.serial#,
    s.username,
    s.status,
    s.osuser,
    s.machine,
    s.program,
    s.module,
    s.action,
    q.sql_id,
    q.sql_text,
    q.start_time,
    q.elapsed_time,
    q.cpu_time
FROM 
    v$session s
JOIN 
    v$sql q ON s.sql_id = q.sql_id
WHERE 
    s.status = 'ACTIVE'
    AND s.username IS NOT NULL
ORDER BY 
    s.sid;

Explanation:
============
v$session: This view contains information about current user sessions.
sid: Session identifier.
serial#: Session serial number, useful for uniquely identifying a session.
username: Username of the session.
status: Status of the session (ACTIVE, INACTIVE, etc.).
osuser: Operating system user name.
machine: Name of the machine where the session is running.
program: Name of the program used by the session.
module: Name of the module using the session.
action: Action currently performed by the session.

v$sql: This view contains information about SQL statements.
sql_id: SQL identifier.
sql_text: Text of the SQL statement.
start_time: Start time of the SQL execution.
elapsed_time: Total elapsed time of the SQL execution.
cpu_time: CPU time used by the SQL execution.
Running the Query
You can execute the above SQL query in SQL*Plus, SQL Developer, or any other tool that you use to interact with your Oracle database. 
The query will return information about all active user sessions and the SQL statements they are currently executing.

Additional Considerations
Permissions: You may need appropriate privileges to access v$session and v$sql. Typically, the SELECT_CATALOG_ROLE or DBA role 
will have these permissions. Filtering: You can add additional filters to the WHERE clause to narrow down the results based on 
specific criteria, such as a particular user or program.
Monitoring Tools
================
For a more user-friendly interface and additional functionalities, you can also use Oracle Enterprise Manager (OEM) or third-party 
tools like TOAD or SQL Developer. These tools often provide graphical interfaces for monitoring sessions and queries, 
making it easier to manage and troubleshoot performance issues in a production environment.

To check for long-running queries in an Oracle database using a Unix shell script, you can create a script that connects to the database, executes a SQL query to find long-running queries, and outputs the results. Hereâ€™s an example of how you can achieve this:

Prerequisites
You should have sqlplus installed and configured to connect to your Oracle database.
Ensure that your Unix user has the necessary permissions to execute SQL queries on the database.
Example Unix Script
Create a file named check_long_running_queries.sh and add the following content:

sh
Copy code
#!/bin/bash

# Database connection details
DB_USER="your_db_user"
DB_PASSWORD="your_db_password"
DB_SID="your_db_sid"
DB_HOST="your_db_host"
DB_PORT="your_db_port"

# Threshold in seconds (e.g., 3600 seconds = 1 hour)
THRESHOLD=3600

# SQL query to find long-running queries
SQL_QUERY="
SET PAGESIZE 500
SET LINESIZE 200
COLUMN username FORMAT A15
COLUMN sql_id FORMAT A15
COLUMN status FORMAT A10
COLUMN machine FORMAT A20
COLUMN program FORMAT A30
COLUMN elapsed_seconds FORMAT 9999999

SELECT 
    s.sid,
    s.serial#,
    s.username,
    s.status,
    s.osuser,
    s.machine,
    s.program,
    q.sql_id,
    q.sql_text,
    ROUND((q.elapsed_time / 1000000), 2) AS elapsed_seconds
FROM 
    v\$session s
JOIN 
    v\$sql q ON s.sql_id = q.sql_id
WHERE 
    s.status = 'ACTIVE'
    AND s.username IS NOT NULL
    AND (q.elapsed_time / 1000000) > $THRESHOLD
ORDER BY 
    q.elapsed_time DESC;
"

# Execute the SQL query
sqlplus -s $DB_USER/$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_SID <<EOF
$SQL_QUERY
EXIT;
EOF
Explanation
Database connection details: Replace your_db_user, your_db_password, your_db_sid, your_db_host, and your_db_port with your actual database connection details.
Threshold: The threshold is set to 3600 seconds (1 hour). You can adjust this value as needed.
SQL query: This query retrieves information about long-running queries that have been running longer than the specified threshold. It joins the v$session and v$sql views to get details about the active sessions and their corresponding SQL statements.
Making the Script Executable
After creating the script, make it executable:

sh
Copy code
chmod +x check_long_running_queries.sh
Running the Script
You can run the script using the following command:

sh
Copy code
./check_long_running_queries.sh
This script will connect to the Oracle database, execute the SQL query, and display the details of long-running queries. You can also schedule this script to run at regular intervals using cron to automate the monitoring process.

Additional Improvements
Logging: You can add logging to the script to record the output to a file.
Email Alerts: Integrate email alerts to notify you when long-running queries are detected.
Error Handling: Add error handling to manage database connection issues and other potential errors.
By customizing and extending this script, you can create a robust solution for monitoring long-running queries in your Oracle database from a Unix environment.


=================================================
To create a Unix script that identifies and kills long-running sessions in an Oracle database, you need to connect to the database, identify the long-running sessions, and then issue commands to kill those sessions. Be cautious with this approach, as killing sessions can disrupt user activities and should be done with proper authorization and understanding of the impact.

### Prerequisites

- Ensure `sqlplus` is installed and configured to connect to your Oracle database.
- Ensure the Unix user has the necessary permissions to execute SQL queries and kill sessions on the database.

### Example Unix Script

Create a file named `kill_long_running_sessions.sh` and add the following content:

```sh
#!/bin/bash

# Database connection details
DB_USER="your_db_user"
DB_PASSWORD="your_db_password"
DB_SID="your_db_sid"
DB_HOST="your_db_host"
DB_PORT="your_db_port"

# Threshold in seconds (e.g., 3600 seconds = 1 hour)
THRESHOLD=3600

# SQL query to find long-running sessions
SQL_QUERY="
SET PAGESIZE 500
SET LINESIZE 200
COLUMN sid FORMAT 999999
COLUMN serial# FORMAT 999999

SELECT 
    s.sid,
    s.serial#
FROM 
    v\$session s
JOIN 
    v\$sql q ON s.sql_id = q.sql_id
WHERE 
    s.status = 'ACTIVE'
    AND s.username IS NOT NULL
    AND (q.elapsed_time / 1000000) > $THRESHOLD;
"

# Function to kill a session
kill_session() {
    local sid=$1
    local serial=$2
    echo "Killing session SID=$sid, SERIAL#=$serial"
    sqlplus -s $DB_USER/$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_SID <<EOF
ALTER SYSTEM KILL SESSION '$sid,$serial' IMMEDIATE;
EXIT;
EOF
}

# Execute the SQL query to find long-running sessions and kill them
sessions=$(sqlplus -s $DB_USER/$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_SID <<EOF
SET HEADING OFF
SET FEEDBACK OFF
$SQL_QUERY
EXIT;
EOF
)

# Loop through the sessions and kill each one
while read -r line; do
    sid=$(echo $line | awk '{print $1}')
    serial=$(echo $line | awk '{print $2}')
    if [ -n "$sid" ] && [ -n "$serial" ]; then
        kill_session $sid $serial
    fi
done <<< "$sessions"
```

### Explanation

- **Database connection details**: Replace `your_db_user`, `your_db_password`, `your_db_sid`, `your_db_host`, and `your_db_port` with your actual database connection details.
- **Threshold**: The threshold is set to 3600 seconds (1 hour). Adjust this value as needed.
- **SQL query**: This query retrieves the `SID` and `SERIAL#` of active sessions that have been running longer than the specified threshold.
- **`kill_session` function**: This function takes a `SID` and `SERIAL#` as arguments and issues the `ALTER SYSTEM KILL SESSION` command to terminate the session.

### Making the Script Executable

After creating the script, make it executable:

```sh
chmod +x kill_long_running_sessions.sh
```

### Running the Script

You can run the script using the following command:

```sh
./kill_long_running_sessions.sh
```

### Additional Improvements

- **Logging**: Add logging to record which sessions were killed.
- **Email Alerts**: Integrate email alerts to notify you when sessions are killed.
- **Error Handling**: Add error handling to manage database connection issues and other potential errors.
- **Safety Checks**: Implement safety checks to avoid killing critical sessions unintentionally.

By customizing and extending this script, you can create a robust solution for managing long-running sessions in your 
Oracle database from a Unix environment. Always test scripts in a development environment before applying them to production 
to ensure they work as expected and do not cause unintended disruptions.

==========================================
To create a Unix script that identifies locked tables in an Oracle database, you can use `sqlplus` to connect to the database and execute a SQL query that retrieves information about locked tables. Here's a script to achieve this:

### Example Unix Script

Create a file named `check_locked_tables.sh` and add the following content:

```sh
#!/bin/bash

# Database connection details
DB_USER="your_db_user"
DB_PASSWORD="your_db_password"
DB_SID="your_db_sid"
DB_HOST="your_db_host"
DB_PORT="your_db_port"

# SQL query to find locked tables
SQL_QUERY="
SET PAGESIZE 500
SET LINESIZE 200
COLUMN owner FORMAT A30
COLUMN object_name FORMAT A30
COLUMN object_type FORMAT A15
COLUMN session_id FORMAT 99999

SELECT
    o.owner,
    o.object_name,
    o.object_type,
    l.session_id
FROM
    dba_objects o,
    v\$locked_object l
WHERE
    o.object_id = l.object_id
ORDER BY
    o.owner, o.object_name;
"

# Execute the SQL query
sqlplus -s $DB_USER/$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_SID <<EOF
$SQL_QUERY
EXIT;
EOF
```

### Explanation

- **Database connection details**: Replace `your_db_user`, `your_db_password`, `your_db_sid`, `your_db_host`, and `your_db_port` with your actual database connection details.
- **SQL query**: This query joins `dba_objects` and `v$locked_object` to retrieve information about locked tables.
  - `dba_objects`: Contains information about database objects.
  - `v$locked_object`: Contains information about locked objects, including the `object_id` and `session_id`.
- **Columns**:
  - `owner`: Owner of the locked object.
  - `object_name`: Name of the locked object.
  - `object_type`: Type of the locked object (e.g., TABLE).
  - `session_id`: Session ID holding the lock.

### Making the Script Executable

After creating the script, make it executable:

```sh
chmod +x check_locked_tables.sh
```

### Running the Script

You can run the script using the following command:

```sh
./check_locked_tables.sh
```

### Additional Improvements

- **Logging**: You can add logging to the script to record the output to a file.
- **Email Alerts**: Integrate email alerts to notify you when locked tables are detected.
- **Error Handling**: Add error handling to manage database connection issues and other potential errors.

By customizing and extending this script, you can create a robust solution for monitoring locked tables in your Oracle database from a Unix environment. Always test scripts in a development environment before applying them to production to ensure they work as expected and do not cause unintended disruptions.
=========================================
Long running query

1. What is the count of data last run and today's run
2. Make sure any code changes happend before this run
3. Generate AWR report for both the run 
      SELECT SNAP_ID, BEGIN_INTERVAL_TIME, END_INTERVAL_TIME
        FROM DBA_HIST_SNAPSHOT
        ORDER BY SNAP_ID;
   To check the 
    1.CPU load
    2.number of session
    3.locking session
4. sql$text to check the xplain plan
    indexes and corresponding tables to make sure the index is required or not 
5. Stale data/gather statistic on Table and Index
6. Fragmentation/data modification
7. We have to make sure the plan is correct or taking wrong plan.
    If the plan in wrong we have to fulsh the memort
8. Still not improved 



Identifying stale or outdated tables in an Oracle database typically involves determining which tables haven't been accessed or modified for a significant period. This can help in database maintenance, optimization, and ensuring efficient use of resources.

Here are the steps and methods to identify stale tables:

### 1. **Using Data Dictionary Views**

Oracle provides several data dictionary views that can be helpful:

- **DBA_TAB_MODIFICATIONS**: Contains information about the DML (INSERT, UPDATE, DELETE) activity on tables.
- **DBA_OBJECTS**: Provides information about all objects in the database, including their last DDL (Data Definition Language) time.
- **DBA_TAB_STATISTICS**: Contains statistics for tables, including the last time statistics were gathered.

#### Example Queries

1. **Identify Tables with No Recent Modifications**
   ```sql
   SELECT table_name, owner, last_analyzed
   FROM dba_tab_statistics
   WHERE last_analyzed < SYSDATE - 365;  -- Tables not analyzed in the last year
   ```

2. **Check DML Activity**
   ```sql
   SELECT table_name, inserts, updates, deletes, timestamp
   FROM dba_tab_modifications
   WHERE timestamp < SYSDATE - 365;  -- Tables with no DML activity in the last year
   ```

3. **Identify Tables with No Recent DDL Changes**
   ```sql
   SELECT object_name, object_type, last_ddl_time
   FROM dba_objects
   WHERE object_type = 'TABLE'
     AND last_ddl_time < SYSDATE - 365;  -- Tables with no DDL changes in the last year
   ```

### 2. **Using Oracle AWR and ASH Reports**

Oracle Automatic Workload Repository (AWR) and Active Session History (ASH) reports can help identify tables that are rarely accessed. These reports provide detailed performance statistics.

1. **Generate AWR Reports**
   ```sql
   -- AWR report generation script
   @$ORACLE_HOME/rdbms/admin/awrrpt.sql
   ```
   Review the generated AWR report to identify tables with low or no activity.

2. **Analyze ASH Data**
   ```sql
   SELECT object_name, COUNT(*)
   FROM dba_hist_active_sess_history ash
   JOIN dba_objects obj ON ash.current_obj# = obj.object_id
   WHERE obj.object_type = 'TABLE'
     AND ash.sample_time > SYSDATE - 365  -- Change to desired period
   GROUP BY object_name
   ORDER BY 2;
   ```

### 3. **Using Custom Scripts**

You can write custom scripts to automate the identification of stale tables based on your specific criteria. For example:

```sql
BEGIN
   FOR rec IN (SELECT table_name
               FROM dba_tables
               WHERE owner = 'YOUR_SCHEMA') LOOP
       EXECUTE IMMEDIATE 'ANALYZE TABLE ' || rec.table_name || ' COMPUTE STATISTICS';
   END LOOP;
END;
/
```

After gathering statistics, use the following query to identify stale tables:

```sql
SELECT table_name, num_rows, last_analyzed
FROM dba_tables
WHERE last_analyzed < SYSDATE - 365
  AND owner = 'YOUR_SCHEMA';
```

### 4. **Using Oracle Enterprise Manager**

Oracle Enterprise Manager (OEM) provides a graphical interface to monitor and manage database activities, including identifying stale tables.

1. **Access Oracle Enterprise Manager**
2. **Navigate to Performance -> SQL Monitoring**
3. **Review Access Patterns and Activity Levels**
4. **Generate Reports on Inactive Tables**

### Summary

Identifying stale tables involves reviewing table modification times, access patterns, and activity levels. Using a combination of data dictionary views, AWR and ASH reports, custom scripts, and tools like Oracle Enterprise Manager can help effectively manage and optimize database resources by identifying and handling stale tables.
