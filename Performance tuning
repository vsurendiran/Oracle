In Oracle, you can check for locking issues (i.e., locks that might be causing contention or blocking other operations) 
using several different methods. Here are some of the most common approaches:
### 1. Using `V$LOCK` and `V$SESSION` Views
These dynamic performance views provide information about locks and sessions.
#### Example Query
SELECT
    s.username,
    s.sid,
    s.serial#,
    s.blocking_session,
    s.osuser,
    s.machine,
    l.type,
    l.lmode,
    l.request,
    l.id1,
    l.id2
FROM
    v$lock l,
    v$session s
WHERE
    s.sid = l.sid
ORDER BY
    s.username, l.type;

### 2. Using `DBA_BLOCKERS` and `DBA_WAITERS`

These views provide information about sessions that are currently blocking others and sessions that are waiting to acquire a lock.

#### Example Query
SELECT
    bw.username AS waiting_user,
    bw.sid AS waiting_sid,
    bw.serial# AS waiting_serial,
    bw.blocker AS blocking_sid
FROM
    dba_waiters bw
ORDER BY
    bw.waiting_user;

### 3. Using `DBA_LOCK` and `DBA_LOCK_INTERNAL`

These views provide a comprehensive list of locks in the database.

#### Example Query

SELECT
    l.lock_type,
    l.mode_held,
    l.mode_requested,
    l.lock_id1,
    l.lock_id2,
    s.username,
    s.sid,
    s.serial#
FROM
    dba_locks l,
    v$session s
WHERE
    l.session_id = s.sid;

### 4. Using Oracle Enterprise Manager (OEM)

Oracle Enterprise Manager provides a graphical interface to monitor and manage locks.

1. **Login to OEM:**
   - Navigate to the Performance tab.

2. **Locks and Blocking Sessions:**
   - Go to the Blocking Sessions section to see a graphical representation of current locks and blockers.

### 5. Using PL/SQL to Detect Blocking Locks

You can write a PL/SQL script to detect and display blocking locks.

#### Example PL/SQL Script

```sql
SET SERVEROUTPUT ON
BEGIN
    FOR rec IN (
        SELECT
            s1.username AS blocker,
            s1.sid AS blocker_sid,
            s2.username AS waiter,
            s2.sid AS waiter_sid,
            s2.lockwait AS lockwait
        FROM
            v$session s1,
            v$session s2
        WHERE
            s1.sid = s2.blocking_session
    )
    LOOP
        DBMS_OUTPUT.PUT_LINE('Blocker: ' || rec.blocker || ' (SID=' || rec.blocker_sid || ')');
        DBMS_OUTPUT.PUT_LINE('Waiter : ' || rec.waiter || ' (SID=' || rec.waiter_sid || ')');
        DBMS_OUTPUT.PUT_LINE('----------------------------------------');
    END LOOP;
END;
/
```

### 6. Using AWR and ASH Reports

Oracle's Automatic Workload Repository (AWR) and Active Session History (ASH) reports can also help identify locking issues over a period of time.

1. **Generate AWR Report:**

   ```sql
   @$ORACLE_HOME/rdbms/admin/awrrpt.sql
   ```

2. **Generate ASH Report:**

   ```sql
   @$ORACLE_HOME/rdbms/admin/ashrpt.sql
   ```

3. **Analyze the Reports:**
   - Look for sections that show wait events related to locks, such as "enq: TX - row lock contention".

### Conclusion

By using these methods, you can effectively monitor and diagnose locking issues in an Oracle database. The choice of method depends on your specific needs and the tools available in your environment. For real-time issues, using dynamic views like `V$LOCK` and `V$SESSION` is very effective, while for historical analysis, AWR and ASH reports are invaluable.


To identify which query is taking a long time within an Oracle procedure, you can use several methods and tools. 
Here are some effective approaches:

### 1. Use `DBMS_OUTPUT.PUT_LINE` for Manual Timing
Add timing and logging to your procedure to identify slow queries.
#### Example:
CREATE OR REPLACE PROCEDURE my_procedure IS
  v_start_time TIMESTAMP;
  v_end_time   TIMESTAMP;
BEGIN
  v_start_time := SYSTIMESTAMP;
  -- Query 1
  EXECUTE IMMEDIATE 'SELECT * FROM large_table';
  v_end_time := SYSTIMESTAMP;
  DBMS_OUTPUT.PUT_LINE('Query 1 execution time: ' || (v_end_time - v_start_time));

  v_start_time := SYSTIMESTAMP;
  -- Query 2
  EXECUTE IMMEDIATE 'SELECT * FROM another_large_table';
  v_end_time := SYSTIMESTAMP;
  DBMS_OUTPUT.PUT_LINE('Query 2 execution time: ' || (v_end_time - v_start_time));
END;
/

### 2. Use Oracle SQL Trace and TKPROF
Enable SQL Trace for the session running the procedure, and then use TKPROF to analyze the trace file.

#### Steps:

1. **Enable SQL Trace:**
   ALTER SESSION SET sql_trace = TRUE;

2. **Run the Procedure:**
   EXEC my_procedure;

3. **Disable SQL Trace:**
   ALTER SESSION SET sql_trace = FALSE;

4. **Locate the Trace File:**
   - Trace files are typically found in the `USER_DUMP_DEST` directory.

5. **Run TKPROF:**
   tkprof tracefile.trc outputfile.prf

### 3. Use Oracle Enterprise Manager (OEM)

Oracle Enterprise Manager provides a graphical interface to monitor the performance of SQL statements and procedures.
1. **Login to OEM:**
   - Navigate to the Performance tab.

2. **Identify Slow Queries:**
   - Use the SQL Monitoring or SQL Details sections to find long-running queries.

### 4. Use `DBMS_SQLTUNE` Package

The `DBMS_SQLTUNE` package can be used to create a SQL tuning task and generate a report.

#### Example:

DECLARE
  l_sql_tune_task_id VARCHAR2(100);
BEGIN
  l_sql_tune_task_id := DBMS_SQLTUNE.create_tuning_task(
                          sql_id => 'Your SQL ID here',
                          scope => 'COMPREHENSIVE',
                          time_limit => 60,
                          task_name => 'my_sql_tuning_task',
                          description => 'Tuning task for slow query');
  DBMS_SQLTUNE.execute_tuning_task(task_name => 'my_sql_tuning_task');
  DBMS_OUTPUT.put_line('Tuning task created: ' || l_sql_tune_task_id);
END;
/

-- To get the report
SET LONG 10000
SELECT DBMS_SQLTUNE.report_tuning_task('my_sql_tuning_task') FROM dual;

### 5. Use Oracle Automatic Workload Repository (AWR)

Generate an AWR report to identify slow queries.
#### Steps:

1. **Generate AWR Report:**
   -- First, find the snapshot IDs you want to compare
   SELECT SNAP_ID, BEGIN_INTERVAL_TIME, END_INTERVAL_TIME
   FROM DBA_HIST_SNAPSHOT
   ORDER BY SNAP_ID DESC;

   -- Generate the AWR report between the desired snapshots
   @$ORACLE_HOME/rdbms/admin/awrrpt.sql
2. **Analyze the AWR Report:**
   - Look for SQL statements with high execution times.

### 6. Use Oracle Active Session History (ASH)
Generate an ASH report to identify slow queries.

#### Steps:

1. **Generate ASH Report:**
   @$ORACLE_HOME/rdbms/admin/ashrpt.sql

2. **Analyze the ASH Report:**
   - Look for SQL statements that are consuming significant resources.

### Conclusion

Using these methods, you can effectively identify long-running queries within an Oracle procedure. 
The choice of method depends on your environment and the tools available to you. For comprehensive analysis, combining multiple methods often yields the best results.


B-Tree Index

In Oracle, an index is a database object that improves the performance of data retrieval operations by providing faster access to rows in a 
table. Indexes are created on one or more columns of a table, and they help the database engine quickly locate and retrieve data without 
scanning the entire table.

### Key Concepts of Indexes

1. **Purpose**: The primary purpose of an index is to enhance the speed of data retrieval operations. Indexes can significantly improve 
query performance, especially for large tables.

2. **Types of Indexes**:
   - **B-tree Index**: The most common type, suitable for high-cardinality columns (columns with many unique values). 
                        It maintains a balanced tree structure to provide fast access.
   - **Bitmap Index**: Suitable for low-cardinality columns (columns with few unique values). It uses bitmaps to efficiently manage space 
                        and speed up complex queries involving multiple low-cardinality columns.
   - **Unique Index**: Ensures that all values in the indexed column(s) are unique. Automatically created when a 
                        unique constraint or primary key constraint is defined.
   - **Composite Index**: An index on multiple columns, useful for queries that filter based on several columns.
   - **Function-Based Index**: An index based on expressions or functions applied to one or more columns, enhancing performance for 
                                queries using those functions.
   - **Reverse Key Index**: Stores the index entries in reverse order of their key values, useful for evenly distributing 
                            data across index leaf blocks and reducing contention in RAC environments.

3. **Syntax for Creating an Index**:
CREATE INDEX index_name ON table_name (column1, column2, ...);

### Example of Creating Different Types of Indexes

1. **B-tree Index**:
CREATE INDEX idx_employee_name ON employees (last_name);

2. **Bitmap Index**:
CREATE BITMAP INDEX idx_employee_gender ON employees (gender);

3. **Unique Index**:
CREATE UNIQUE INDEX idx_employee_id ON employees (employee_id);

4. **Composite Index**:
CREATE INDEX idx_employee_dept ON employees (department_id, job_id);

5. **Function-Based Index**:
CREATE INDEX idx_upper_last_name ON employees (UPPER(last_name));

6. **Reverse Key Index**:
CREATE INDEX idx_reverse_employee_id ON employees (employee_id) REVERSE;

### Using Indexes in Queries

Oracle automatically uses indexes to optimize query performance when possible. However, you can provide hints to the optimizer to use a 
specific index:

SELECT /*+ INDEX(employees idx_employee_name) */ last_name, first_name FROM employees
WHERE last_name = 'Smith';

### Managing Indexes

1. **Dropping an Index**:
DROP INDEX idx_employee_name;

2. **Rebuilding an Index**:
ALTER INDEX idx_employee_name REBUILD;

3. **Monitoring Index Usage**:
You can monitor index usage using the `V$OBJECT_USAGE` view:
ALTER INDEX IDX_DEPTNO MONITORING USAGE;
SELECT * FROM V$OBJECT_USAGE WHERE INDEX_NAME = 'IDX_EMPLOYEE_NAME';
ALTER INDEX index_name NOMONITORING USAGE;

### Benefits of Indexes
- **Faster Query Performance**: Indexes can significantly reduce the time it takes to retrieve data from a table.
- **Efficient Sorting**: Indexes can help speed up sorting operations, as the data is already partially sorted.
- **Improved Join Performance**: Indexes can enhance the performance of join operations by quickly locating matching rows.

### Drawbacks of Indexes
- **Increased Storage**: Indexes consume additional storage space.
- **Slower Write Operations**: Insert, update, and delete operations can be slower, as the indexes need to be updated along with the table data.
- **Maintenance Overhead**: Indexes need to be maintained and occasionally rebuilt to ensure optimal performance.

### Conclusion
Indexes are essential tools in Oracle databases for improving query performance. By understanding the different types of indexes and 
their appropriate use cases, you can design efficient databases that provide quick and responsive data access.

Index organized Tables
========================

Create table emplyees_iot (
employee_id number(6,0) constraint pk_emp_id primary key,
first_name varchar2(20),
department_id number(4))
organization index 
including DEPARTMENT_ID overflow;

Disadvantages
=============
1. You must have a primary key on the table with a unique value
2. you can not have any other indexes on the data
3. You can not partition an index-organized table.
4. An index-organized table cannnot be a part of a cluster
5. The data in the row must be fairly small.  Large amounts of data in the leaf nodes will require more I/O's to retrieve it.
6. An IOT cannot contain a column of LONG data type.
