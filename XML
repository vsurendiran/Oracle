When to Use XMLType
Use XMLType when you need to perform the following:

1. SQL queries on part of or the whole XML document: The functions existsNode() and extract() provide the necessary SQL query functions over XML documents.
2. Strong typing inside SQL statements and PL/SQL functions: Strong typing implies that you ensure that the values passed in are XML values and not any arbitrary text string.
3. XPath functionality provided by extract() and existsNode() functions: Note that XMLType uses the built-in C XML parser and processor and hence provides better performance 
   and scalability when used inside the server.
4. Indexing on XPath searches on documents: XMLType has member functions that you can use to create function-based indexes to optimize searches.
5. To shield applications from storage models. Using XMLType instead of CLOBs or relational storage allows applications to gracefully move to various storage alternatives later 
   without affecting any of the query or DML statements in the application.
6. To prepare for future optimizations. New XML functionality will support XMLType. Since Oracle9i database is natively aware that XMLType can store XML data, better optimizations 
   and indexing techniques can be done. By writing applications to use XMLType, these optimizations and enhancements can be easily achieved and preserved in future releases without 
  your needing to rewrite applications.

When to Use CLOB Storage for XMLType
Use CLOB storage for XMLType in the following cases:

You need to store XML as a whole document in the database and retrieve it as a whole document.
You do not need to perform piece-wise updates on XML documents.

Note:
XMLType and Varray:

You cannot create VARRAYs of XMLType and store them in the database since VARRAYs do not support CLOBs when stored in tables.
You cannot create columns of VARRAY types that contain XMLType. This is because Oracle does not support LOB locators inside VARRAYs.


drop table warehouses;

CREATE TABLE warehouses(
  warehouse_id NUMBER(3),
  warehouse_spec XMLTYPE,
  warehouse_name VARCHAR2(35),
  location_id NUMBER(4));
  
INSERT INTO warehouses VALUES 
   (       100, XMLType(
              '<Warehouse whNo="100"> 
               <Building>Owned</Building>
               </Warehouse>'), 'Tower Records', 1003);
               
SELECT w.warehouse_spec.extract('/Warehouse/Building/text()').getStringVal() "Building"
  FROM warehouses w;     

select * FROM warehouses w;  

DELETE FROM warehouses e WHERE e.warehouse_spec.extract('//Building2/text()').getStringVal() = 'Owned';

====================================================
CREATE TABLE po_clob_tab 
( 
  poid number,
  poClob CLOB
);

-- some value is present in the po_clob_tab
INSERT INTO po_clob_tab 
     VALUES(100, '<?xml version="1.0"?>
                    <PO pono="1">
                       <PNAME>Po_1</PNAME>
                       <CUSTNAME>John</CUSTNAME>
                       <SHIPADDR>
                          <STREET>1033, Main Street</STREET>
                          <CITY>Sunnyvalue</CITY>
                          <STATE>CA</STATE>
                       </SHIPADDR>
                    </PO>');

drop table po_xml_tab;

CREATE TABLE po_xml_tab 
( 
  poid number,
  poClob xmltype
);

INSERT INTO po_xml_tab 
       SELECT poid, XMLType(poClob)
       FROM po_clob_tab;


SELECT  e.poClob.getClobval() AS poXML
   FROM po_xml_tab e
===================================================================================
To create an XML type column in an Oracle database, you need to use the `XMLType` data type. Oracle provides robust support for storing and querying XML data through the `XMLType` data type, which is specifically designed for handling XML data. Here's a step-by-step guide to creating a table with an XML type column:

### Step-by-Step Guide

1. **Create a Table with an XMLType Column**:
   Use the `CREATE TABLE` statement to define a table with an `XMLType` column.

2. **Insert Data into the XMLType Column**:
   Use the `INSERT` statement to insert XML data into the `XMLType` column.

3. **Query the XMLType Column**:
   Use SQL/XML functions to query and manipulate XML data stored in the `XMLType` column.

### Example

#### Step 1: Create a Table with an XMLType Column

```sql
CREATE TABLE employees (
    employee_id NUMBER,
    employee_name VARCHAR2(100),
    employee_data XMLTYPE
);
```

#### Step 2: Insert Data into the XMLType Column

```sql
INSERT INTO employees (employee_id, employee_name, employee_data)
VALUES (
    1,
    'John Doe',
    XMLType('<?xml version="1.0"?>
             <employee>
               <id>1</id>
               <name>John Doe</name>
               <position>Software Engineer</position>
               <salary>75000</salary>
             </employee>')
);
```

#### Step 3: Query the XMLType Column

You can use SQL/XML functions such as `EXTRACT` and `EXTRACTVALUE` to query XML data. Here's an example:

```sql
-- Query the XML data to extract the employee name and position
SELECT employee_id,
       employee_name,
       employee_data.EXTRACT('/employee/name/text()').getStringVal() AS name,
       employee_data.EXTRACT('/employee/position/text()').getStringVal() AS position
FROM employees;
```

#### Step 4: Update the XMLType Column

You can also update the XML data using the `UPDATE` statement:

```sql
UPDATE employees
SET employee_data = XMLType('<?xml version="1.0"?>
                             <employee>
                               <id>1</id>
                               <name>John Doe</name>
                               <position>Senior Software Engineer</position>
                               <salary>85000</salary>
                             </employee>')
WHERE employee_id = 1;
```

### Important Notes

1. **Indexing XMLType Columns**:
   - You can create XML indexes on `XMLType` columns to improve the performance of queries that access XML data. For example:
     ```sql
     CREATE INDEX emp_xml_idx ON employees (employee_data) INDEXTYPE IS XDB.XMLIndex;
     ```

2. **Using XML Schema**:
   - If you have an XML schema, you can register it with the database and use it to validate the XML data. This can be done using the `DBMS_XMLSCHEMA` package.

3. **Storage Options**:
   - Oracle provides different storage options for `XMLType` columns, such as binary XML storage and CLOB storage. You can specify the storage option when creating the table. 
For example:

     CREATE TABLE employees (
         employee_id NUMBER,
         employee_name VARCHAR2(100),
         employee_data XMLTYPE STORE AS BINARY XML
     );

### Conclusion

Creating and working with `XMLType` columns in Oracle allows you to store and manage XML data efficiently. By using Oracle's XML features, 
you can leverage the power of XML for data interchange, storage, 
and querying within your database applications.
